-------------DAY 5 HOMEWORK

--LESSON.CUSTOMERS
SELECT * FROM LESSON.CUSTOMERS

--find customers whose age between 20 and 27
SELECT * FROM LESSON.CUSTOMERS
WHERE AGE between 20 and 27   --8

--find customers whose salary is less than equal to 122800
SELECT * FROM LESSON.CUSTOMERS
WHERE SALARY <= 122800   --5

--find out max,min,avg salary
SELECT MAX(SALARY) as Max_Sal, MIN(SALARY) as Min_Sal, AVG(SALARY) as Avg_Sal FROM LESSON.CUSTOMERS

--SELECT * FROM LEVELUP.Loan_Dataset

--find out how many customers has credit score between 600 to 700
SELECT COUNT(*) FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700   --12

--find out what is max,min,avg loan amount whose credit score between 700 to 800
SELECT MAX(Loan_Amount) as Max_Loan, MIN(Loan_Amount) as Min_Loan, AVG(Loan_Amount) as Avg_Loan FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 700 and 800    --2500000, 7000, 358600

--find out what is max,min,avg loan amount whose credit score between 600 to 700
SELECT MAX(Loan_Amount) as Max_Loan, MIN(Loan_Amount) as Min_Loan, AVG(Loan_Amount) as Avg_Loan FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700    --3200000, 4000, 295416

--find out what is max,min,avg income amount whose credit score between 700 to 800
SELECT MAX(Income) as Max_Income, MIN(Income) as Min_Income, AVG(Income) as Avg_Income FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 700 and 800   --200000, 35000, 97500

--find out what is max,min,avg income amount whose credit score between 600 to 700
SELECT MAX(Income) as Max_Income, MIN(Income) as Min_Income, AVG(Income) as Avg_Income FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700   --120000, 35000, 72083

-----------Day 6 HOMEWORK

SELECT RIGHT(first_name, 5), * FROM production.customers

SELECT RIGHT(last_name, 4), * FROM production.customers

SELECT LEN(first_name) as firstNameLength, * FROM production.customers order by firstNameLength desc --11

SELECT LEN(first_name) as firstNameLength, * FROM production.customers order by firstNameLength asc --2

SELECT UPPER(RTRIM(LTRIM(first_name))) as firstName_fixed, * FROM production.customers

SELECT LOWER(RTRIM(LTRIM(first_name))) as lastName_fixed, * FROM production.customers

SELECT UPPER((RTRIM(LTRIM(first_name))) + ' ' + (RTRIM(LTRIM(first_name)))) as fullName_fixed FROM production.customers

-----------Day 7 HOMEWORK

SELECT first_name + ' ' + last_name as Full_name FROM sales.customers
WHERE zip_code = 14127

SELECT COUNT(DISTINCT(customer_id)) FROM sales.orders  --1445

SELECT MAX(list_price) as Max, MIN(list_price) as Min, AVG(list_price) as Avg FROM sales.order_items

SELECT TOP 1 * FROM sales.customers order by LEN(street) desc
SELECT MAX( LEN(street) ) FROM sales.customers

SELECT LEFT(first_name, 5), first_name FROM production.customers

SELECT RIGHT(last_name, 4), last_name FROM production.customers

SELECT MAX( LEN(first_name) ) FROM production.customers  --11

SELECT MIN( LEN(first_name) ) FROM production.customers  --2

SELECT UPPER(first_name) FROM production.customers

SELECT LOWER(first_name) FROM production.customers

-----------Day 8 HOMEWORK

--1. Get orders data for customers living in the 90278 area with a Gmail email address and orders that have been shipped.
SELECT * FROM [sales].[orders] WHERE shipped_date is not NULL and customer_id in (
SELECT customer_id FROM sales.customers WHERE zip_code = '90278' and email like '%gmail.com'
)    --1  

--2. Find orders for customers who reside in New York (NY) with a ZIP code of 11050.
SELECT * FROM [sales].[orders] WHERE customer_id in (
SELECT customer_id FROM [sales].[customers] WHERE state = 'NY' and zip_code = '11050'
)   --12

--3. List product names that have a stock quantity of less than 5 pieces.
SELECT product_name FROM [production].[products] WHERE product_id in (
SELECT product_id FROM [production].[stocks] WHERE quantity < 5
)    --138

--4. Show product names that have a 7% discount applied. (Assuming you are working with sales.order_items and production.products tables.)
SELECT product_name FROM [production].[products] WHERE product_id in (
SELECT product_id FROM [sales].[order_items] WHERE discount = 0.07
)     --213

--5. Find the first_name, last_name, department_id of employees who work in the same department as the employee with the lowest salary.
SELECT first_name, last_name, department_id FROM [LEVELUP].[employees] WHERE department_id = (
SELECT TOP 1 department_id FROM [LEVELUP].[employees] order by salary asc
)    --6

--6. Find first_name, last_name, salary employees who have a salary greater than the highest salary in the "Accounting" department
SELECT first_name, last_name FROM [LEVELUP].[employees] WHERE salary > (
SELECT MAX(salary) FROM [LEVELUP].[employees] WHERE department_id = (
SELECT department_id FROM [LEVELUP].[departments] WHERE department_name = 'Accounting'
))    --6

-----------Day 9 HOMEWORK

--Write an SQL query to fetch the current date-time from the system.
SELECT GETDATE ()

--Write an SQL query to fetch TOP 8 highest prices in products.
SELECT TOP 8 * FROM [production].[products] order by list_price desc

--Write an SQL query to fetch all customers that first name length equal to 10.
SELECT * FROM [sales].[customers] 
WHERE LEN(first_name) = 10

--Write a query to find all customer last names whose name:
-------Begin with A
SELECT * FROM [sales].[customers] 
WHERE last_name like 'A%'

-------Ends with S and contains 3 alphabets
SELECT * FROM [sales].[customers] 
WHERE last_name like '___S'

-------Start with M and contain 2 alphabets and end with s (total 4 alphabets)
SELECT * FROM [sales].[customers] 
WHERE last_name like 'M__s'

--How many unique sales our company did based on order_items table.
SELECT COUNT(DISTINCT(item_id)) FROM [sales].[order_items]

--Write query that find max, min,avg salary for each job_id use  => levelup.employees.
SELECT MAX(salary) as max_sal, MIN(salary) as min_sal, AVG(salary) as avg_sal, job_id FROM [LEVELUP].[employees] 
GROUP BY job_id

-----------Day 10 HOMEWORK

/* Display the customer's name, city, and a column called region that shows "West" if the customer lives in 
California or Washington, "East" if they live in New York or Florida, and "Other" for all other states. FROM [sales].[customers] */
SELECT first_name, last_name, city,
CASE
	WHEN state in ('CA', 'WA') THEN 'West'
	WHEN state in ('NY', 'FL') THEN 'East'
	ELSE 'Other'
END as REGION
FROM [sales].[customers]

--Show the customer's name and phone number. If the phone number is null, display "No phone number" instead. FROM [sales].[customers]
SELECT first_name, last_name, 
CASE
	WHEN phone is null THEN 'No phone number'
	ELSE phone
END as Phone_number
FROM [sales].[customers]

/* Generate column based on the list price if list price is between 10 to 100 its cheap product_id if list price is between 
100 to 1000 its average priced product_id if list price is more than 1000 then its expensive product */
SELECT list_price,
CASE
	WHEN list_price > 1000 THEN 'Expensive'
	WHEN list_price between 100 and 1000 THEN 'Average'
	WHEN list_price between 10 and 100 THEN 'Cheap'
	ELSE 'N/A'
END as Price_range
FROM [production].[products]

--Write an SQL query to fetch TOP 15 highest prices in products.
SELECT TOP 15 * FROM [production].[products] order by list_price desc

--How many order placed in May
SELECT COUNT(*) FROM [sales].[orders]
WHERE MONTH (order_date) = '5'     --108

--How many order placed for Each year
SELECT COUNT(*), YEAR(order_date) FROM [sales].[orders] 
GROUP BY YEAR(order_date)

-----------Day 13 HOMEWORK

--show me how many orders for each shipcountry for each customer  DBO.orders
SELECT COUNT(*), ord.ShipCountry, cus.ContactName FROM dbo.Orders as ord
JOIN dbo.Customers as cus
ON ord.CustomerID = cus.CustomerID
GROUP BY ord.ShipCountry, cus.ContactName

--show me total sales for each customer
SELECT SUM(list_price) as ttl_sales, cus.first_name FROM [sales].[customers] as cus
JOIN [sales].[orders] as ord
ON cus.customer_id = ord.customer_id
JOIN [sales].[order_items] as ordit
ON ord.order_id = ordit.order_id
GROUP BY cus.first_name


--show me total salesamount for each salesperson
SELECT SUM(list_price) as ttl_sales, staff.first_name FROM [sales].[staffs] as staff
JOIN [sales].[orders] as ord
ON staff.staff_id = ord.staff_id
JOIN [sales].[order_items] as ordit
ON ord.order_id = ordit.order_id
GROUP BY staff.first_name 
