-------------DAY 5 HOMEWORK

--LESSON.CUSTOMERS
SELECT * FROM LESSON.CUSTOMERS

--find customers whose age between 20 and 27
SELECT * FROM LESSON.CUSTOMERS
WHERE AGE between 20 and 27   --8

--find customers whose salary is less than equal to 122800
SELECT * FROM LESSON.CUSTOMERS
WHERE SALARY <= 122800   --5

--find out max,min,avg salary
SELECT MAX(SALARY) as Max_Sal, MIN(SALARY) as Min_Sal, AVG(SALARY) as Avg_Sal FROM LESSON.CUSTOMERS

--SELECT * FROM LEVELUP.Loan_Dataset

--find out how many customers has credit score between 600 to 700
SELECT COUNT(*) FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700   --12

--find out what is max,min,avg loan amount whose credit score between 700 to 800
SELECT MAX(Loan_Amount) as Max_Loan, MIN(Loan_Amount) as Min_Loan, AVG(Loan_Amount) as Avg_Loan FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 700 and 800    --2500000, 7000, 358600

--find out what is max,min,avg loan amount whose credit score between 600 to 700
SELECT MAX(Loan_Amount) as Max_Loan, MIN(Loan_Amount) as Min_Loan, AVG(Loan_Amount) as Avg_Loan FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700    --3200000, 4000, 295416

--find out what is max,min,avg income amount whose credit score between 700 to 800
SELECT MAX(Income) as Max_Income, MIN(Income) as Min_Income, AVG(Income) as Avg_Income FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 700 and 800   --200000, 35000, 97500

--find out what is max,min,avg income amount whose credit score between 600 to 700
SELECT MAX(Income) as Max_Income, MIN(Income) as Min_Income, AVG(Income) as Avg_Income FROM LEVELUP.Loan_Dataset
WHERE Credit_Score between 600 and 700   --120000, 35000, 72083

-----------Day 6 HOMEWORK

SELECT RIGHT(first_name, 5), * FROM production.customers

SELECT RIGHT(last_name, 4), * FROM production.customers

SELECT LEN(first_name) as firstNameLength, * FROM production.customers order by firstNameLength desc --11

SELECT LEN(first_name) as firstNameLength, * FROM production.customers order by firstNameLength asc --2

SELECT UPPER(RTRIM(LTRIM(first_name))) as firstName_fixed, * FROM production.customers

SELECT LOWER(RTRIM(LTRIM(first_name))) as lastName_fixed, * FROM production.customers

SELECT UPPER((RTRIM(LTRIM(first_name))) + ' ' + (RTRIM(LTRIM(first_name)))) as fullName_fixed FROM production.customers

-----------Day 7 HOMEWORK

SELECT first_name + ' ' + last_name as Full_name FROM sales.customers
WHERE zip_code = 14127

SELECT COUNT(DISTINCT(customer_id)) FROM sales.orders  --1445

SELECT MAX(list_price) as Max, MIN(list_price) as Min, AVG(list_price) as Avg FROM sales.order_items

SELECT TOP 1 * FROM sales.customers order by LEN(street) desc
SELECT MAX( LEN(street) ) FROM sales.customers

SELECT LEFT(first_name, 5), first_name FROM production.customers

SELECT RIGHT(last_name, 4), last_name FROM production.customers

SELECT MAX( LEN(first_name) ) FROM production.customers  --11

SELECT MIN( LEN(first_name) ) FROM production.customers  --2

SELECT UPPER(first_name) FROM production.customers

SELECT LOWER(first_name) FROM production.customers

-----------Day 8 HOMEWORK

--1. Get orders data for customers living in the 90278 area with a Gmail email address and orders that have been shipped.
SELECT * FROM [sales].[orders] WHERE shipped_date is not NULL and customer_id in (
SELECT customer_id FROM sales.customers WHERE zip_code = '90278' and email like '%gmail.com'
)    --1  

--2. Find orders for customers who reside in New York (NY) with a ZIP code of 11050.
SELECT * FROM [sales].[orders] WHERE customer_id in (
SELECT customer_id FROM [sales].[customers] WHERE state = 'NY' and zip_code = '11050'
)   --12

--3. List product names that have a stock quantity of less than 5 pieces.
SELECT product_name FROM [production].[products] WHERE product_id in (
SELECT product_id FROM [production].[stocks] WHERE quantity < 5
)    --138

--4. Show product names that have a 7% discount applied. (Assuming you are working with sales.order_items and production.products tables.)
SELECT product_name FROM [production].[products] WHERE product_id in (
SELECT product_id FROM [sales].[order_items] WHERE discount = 0.07
)     --213

--5. Find the first_name, last_name, department_id of employees who work in the same department as the employee with the lowest salary.
SELECT first_name, last_name, department_id FROM [LEVELUP].[employees] WHERE department_id = (
SELECT TOP 1 department_id FROM [LEVELUP].[employees] order by salary asc
)    --6

--6. Find first_name, last_name, salary employees who have a salary greater than the highest salary in the "Accounting" department
SELECT first_name, last_name FROM [LEVELUP].[employees] WHERE salary > (
SELECT MAX(salary) FROM [LEVELUP].[employees] WHERE department_id = (
SELECT department_id FROM [LEVELUP].[departments] WHERE department_name = 'Accounting'
))    --6
